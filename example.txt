I      = ->self.self
true   = ->first->second.first
false  = ->first->second.second
not    = ->value.(value false true)
or     = ->x y.(x true y)
and    = ->x y.(x y false)
if     = ->condition consequent alternative.(condition consequent alternative)
null   = false
pair   = ->first rest.->select.(select first rest)
first  = ->pair.(pair true)
rest   = ->pair.(pair false)
empty? = ->list.(list ->first->rest->bool.false true)
Y      = ->self.(->arg.(self (arg arg)) ->arg.(self (arg arg)))
append = (Y ->append list other.(if (empty? list) other (pair (first list) (append (rest list) other))))
parse  = (Y
  ->parse input.
  (input (->head1 tail1.(tail1 ->head2 tail2.
    (if head1
      (if head2
        (->var.(pair (pair head1 (first var)) (rest var)) (parse tail1))
        (pair (pair head1 (pair head2 null)) tail2))
      (if head2
        (->fun.
          (->arg.
            (pair (pair head1 (pair head2 (append (first fun) (first arg)))) (rest fun))
            (parse (rest fun)))
          (parse tail2))
        (->term.(pair (pair head1 (pair head2 (first term))) (rest term)) (parse tail2))
        ))))))
eval  = (Y
  ->eval input environment.
  (input (->head1 tail1.(tail1 ->head2 tail2.
    (if head1
      (if head2
        (eval tail1 (rest environment))
        
        (first environment))
      (if head2
        (eval (eval tail2 environment) environment)
        (->environment.(eval tail2 environment))))))))
env   = (pair (parse input) (pair output null))

(first (rest (rest (rest (rest (first(parse input)))))))

01 10 10
