(quote ())
null
(quote (+ (* 2 x) 3))
(first (quote (1 2 3)))
(rest (quote (1 2 3)))
(cons 1 (quote (2 3)))
(cons 1 (quote ()))
(cons 1 (cons 2 (cons 3 null)))
(define x 0)
x
(define y (quote (1 2 3)))
y
(cons x y)
((lambda (z) z) 3)
((lambda (z) (quote (1 2 3))) 2)
((lambda z z) 1)
(((lambda (y) (lambda (x) (cons x (cons y (quote()))))) 2) 3)
(define f (lambda (x) x))
(f 3)
((lambda (x y) (cons x (cons y null))) 1 2)
((lambda x x) 1 2)
(true 1 0)
(false 1 0)
((eq 2 2) 1 0)
((eq 2 3) 1 0)
((not true) 1 0)
((not false) 1 0)
((null? null) 1 0)
((null? (quote ())) 1 0)
((null? 2) 1 0)
((null? (quote (1 2 3))) 1 0)
((pair? (quote (1 2 3))) 1 0)
((pair? (quote 1)) 1 0)
((pair? null) 1 0)
