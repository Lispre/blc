(quote ())
null
(quote (+ (* 2 x) 3))
(first (quote (1 2 3)))
(rest (quote (1 2 3)))
(first (rest (quote (1 2 3))))
(cons 1 (quote (2 3)))
(cons 1 (quote ()))
(cons 1 (cons 2 (cons 3 null)))
(define x 0)
x
(+ x x)
(define y (quote (1 2 3)))
y
(cons x y)
((lambda x x))
((lambda x x) 7)
((lambda (z) z) 3)
((lambda (z) (quote (1 2 3))) 2)
((lambda z z) 5)
(((lambda (y) (lambda (x) (cons x (cons y (quote()))))) 2) 3)
(define f (lambda (x) x))
(f 3)
(define u (lambda () v))
(second (quote (1 2 3 4)))
(third (quote (1 2 3 4)))
(define v 8)
(u)
((lambda (x y) (cons x (cons y null))) 1 2)
((lambda x x) 1 2)
(list 2 3 5 7)
(list null null)
(#t 1 0)
(#f 1 0)
(#t 5 (unknown))
(#f (unknown) 4)
((eq? 2 2) 1 0)
((eq? 2 3) 1 0)
((not #t) 1 0)
((not #f) 1 0)
((null? null) 1 0)
((null? (quote ())) 1 0)
((null? 2) 1 0)
((null? (quote (1 2 3))) 1 0)
((pair? (quote (1 2 3))) 1 0)
((pair? (quote 1)) 1 0)
((pair? null) 1 0)
((and #f #f) 5 2)
((and #f #t) 5 2)
((and #t #f) 5 2)
((and #t #t) 5 2)
((or #f #f) 8 7)
((or #f #t) 8 7)
((or #t #f) 8 7)
((or #t #t) 8 7)
(if #t 6 3)
(if #f 6 3)
(define test (lambda (l) ((null? l) 0 (test (rest l)))))
(test (quote (2 1 3)))
(define member? (lambda (x l) (if (null? l) #f (if (eq? x (first l)) #t (member? x (rest l))))))
((member? 1 (quote (3 1 2))) 1 0)
((member? 1 (quote (3 4 2))) 1 0)
(append (quote (1 2 3)) (quote (4 5)))
(assoc 3 (quote ((1 a) (2 b) (3 c) (4 d))))
(assoc 5 (quote ((1 a) (2 b) (3 c) (4 d))))
(cond (#t 2) (#t 3))
(cond (#f 2) (#t 3))
(cond (#f 2) (#f 3))
