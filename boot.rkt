(define list (lambda l l))
(define second (lambda (l) (first (rest l))))
(define third (lambda (l) (first (rest (rest l)))))
(define #t (lambda (x y) x))
(define #f (lambda (x y) y))
(define not (lambda (b) (lambda (x y) (b y x))))
(define and (lambda (x y) (x y x)))
(define or (lambda (x y) (x x y)))
(define append (lambda (l1 l2) (if (null? l1) l2 (cons (first l1) (append (rest l1) l2)))))
