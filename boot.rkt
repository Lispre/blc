(define list (lambda l l))
(define second (lambda (l) (first (rest l))))
(define third (lambda (l) (first (rest (rest l)))))
(define #t (lambda (x y) x))
(define #f (lambda (x y) y))
(define not (lambda (b) (lambda (x y) (b y x))))
(define and (lambda (x y) (x y x)))
(define or (lambda (x y) (x x y)))
(define append (lambda (l1 l2) (if (null? l1)
                                  l2
                                  (cons (first l1) (append (rest l1) l2)))))
(define else #t)
(define assoc (lambda (v lst) (cond ((null? lst)                          #f)
                                    ((eq? (first (first lst)) v) (first lst))
                                    (else                        (assoc v (rest lst))))))
(define equal? (lambda (a b) (cond ((and (null? a) (null? b)) #t)
                                   ((or (null? a) (null? b))  #f)
                                   ((and (pair? a) (pair? b)) (and (equal? (first a) (first b)) (equal? (rest a) (rest b))))
                                   ((or (pair? a) (pair? b))  #f)
                                   (else                      (eq? a b)))))
